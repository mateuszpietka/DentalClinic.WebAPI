// <auto-generated />
using System;
using DentalClinic.MedicalRecords.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalClinic.MedicalRecords.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalRecordsDbContext))]
    partial class MedicalRecordsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("medicalRecords")
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DentalClinic.MedicalRecords.Core.PatientCards.Entities.PatientCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PatientCards", "medicalRecords");
                });

            modelBuilder.Entity("DentalClinic.MedicalRecords.Core.PatientCards.Entities.PatientCardAnnotation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Contents")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientCardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientCardId");

                    b.ToTable("PatientCardAnnotations", "medicalRecords");
                });

            modelBuilder.Entity("DentalClinic.MedicalRecords.Core.Toothing.Entities.PatientTooth", b =>
                {
                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuadrantCode")
                        .HasColumnType("int");

                    b.Property<int>("ToothNumber")
                        .HasColumnType("int");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "QuadrantCode", "ToothNumber");

                    b.ToTable("PatientTeeth", "medicalRecords");
                });

            modelBuilder.Entity("DentalClinic.MedicalRecords.Core.PatientCards.Entities.PatientCardAnnotation", b =>
                {
                    b.HasOne("DentalClinic.MedicalRecords.Core.PatientCards.Entities.PatientCard", null)
                        .WithMany("PatientCardAnnotations")
                        .HasForeignKey("PatientCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DentalClinic.MedicalRecords.Core.PatientCards.Entities.PatientCard", b =>
                {
                    b.Navigation("PatientCardAnnotations");
                });
#pragma warning restore 612, 618
        }
    }
}
